{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo T470p\\\\Desktop\\\\Projects\\\\task_3\\\\src\\\\pages\\\\PalettePage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import palettes from '../data/palette.json';\n// import './PalettePage.css';\n// import clickSound from '../assets/src_notify.mp3'; // Ensure your file name and path are correct\n\n// const PalettePage = () => {\n//   const { id } = useParams();\n//   const palette = palettes.find((p) => p.id === id);\n//   const [fullscreenColor, setFullscreenColor] = useState(null);\n//   const [soundOn, setSoundOn] = useState(true);\n\n//   if (!palette) {\n//     return <div>Palette not found</div>;\n//   }\n\n//   const handleToggleSound = () => {\n//     setSoundOn((prev) => !prev);\n//   };\n\n//   const handleColorClick = (color) => {\n//     if (soundOn) {\n//       const audio = new Audio(clickSound);\n//       audio.play();\n//     }\n//     navigator.clipboard.writeText(color.color);\n//     setFullscreenColor(color.color);\n//     setTimeout(() => {\n//       setFullscreenColor(null);\n//     }, 1000);\n//   };\n\n//   return (\n//     <div className=\"palette-page\">\n//       <header className=\"palette-header\">\n//         <a href=\"/\" className=\"back-button\">Back</a>\n//         <h2 className=\"palette-title\">\n//           {palette.paletteName} {palette.emoji}\n//         </h2>\n//         <button onClick={handleToggleSound} className=\"sound-toggle-button\">\n//           {soundOn ? 'Sound On' : 'Sound Off'}\n//         </button>\n//       </header>\n//       <div className=\"color-grid\">\n//         {palette.colors.map((color, index) => (\n//           <div\n//             key={index}\n//             className=\"color\"\n//             style={{ backgroundColor: color.color }}\n//             onClick={() => handleColorClick(color)}\n//           >\n//             {color.name}\n//           </div>\n//         ))}\n//       </div>\n//       {fullscreenColor && (\n//         <div className=\"fullscreen\" style={{ backgroundColor: fullscreenColor }}>\n//           <div className=\"fullscreen-content\">\n//             <span className=\"color-code\">{fullscreenColor}</span>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default PalettePage;\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport palettes from '../data/palette.json';\nimport './PalettePage.css';\nimport clickSound from '../assets/src_notify.mp3'; // Ensure your file name and path are correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PalettePage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const palette = palettes.find(p => p.id === id);\n  const [fullscreenColor, setFullscreenColor] = useState(null);\n  const [soundOn, setSoundOn] = useState(true);\n  if (!palette) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Palette not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  }\n  const handleToggleSound = () => {\n    setSoundOn(prev => !prev);\n  };\n  const handleColorClick = color => {\n    if (soundOn) {\n      const audio = new Audio(clickSound);\n      audio.play();\n    }\n    navigator.clipboard.writeText(color.color);\n    setFullscreenColor(color.color);\n    setTimeout(() => {\n      setFullscreenColor(null);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"palette-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"palette-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"back-button\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"palette-title\",\n        children: [palette.paletteName, \" \", palette.emoji]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleSound,\n        className: \"sound-toggle-button\",\n        children: soundOn ? 'Sound On' : 'Sound Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-grid\",\n      children: palette.colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color\",\n        style: {\n          backgroundColor: color.color\n        },\n        onClick: () => handleColorClick(color),\n        children: [color.name, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"copy-label\",\n          children: \"COPY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), fullscreenColor && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fullscreen\",\n      style: {\n        backgroundColor: fullscreenColor\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fullscreen-content\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"color-code\",\n          children: fullscreenColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(PalettePage, \"hIa/sDKtltVPhRpHLBDonA631Nc=\", false, function () {\n  return [useParams];\n});\n_c = PalettePage;\nexport default PalettePage;\nvar _c;\n$RefreshReg$(_c, \"PalettePage\");","map":{"version":3,"names":["React","useState","useParams","palettes","clickSound","jsxDEV","_jsxDEV","PalettePage","_s","id","palette","find","p","fullscreenColor","setFullscreenColor","soundOn","setSoundOn","children","fileName","_jsxFileName","lineNumber","columnNumber","handleToggleSound","prev","handleColorClick","color","audio","Audio","play","navigator","clipboard","writeText","setTimeout","className","href","paletteName","emoji","onClick","colors","map","index","style","backgroundColor","name","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo T470p/Desktop/Projects/task_3/src/pages/PalettePage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import palettes from '../data/palette.json';\r\n// import './PalettePage.css';\r\n// import clickSound from '../assets/src_notify.mp3'; // Ensure your file name and path are correct\r\n\r\n// const PalettePage = () => {\r\n//   const { id } = useParams();\r\n//   const palette = palettes.find((p) => p.id === id);\r\n//   const [fullscreenColor, setFullscreenColor] = useState(null);\r\n//   const [soundOn, setSoundOn] = useState(true);\r\n\r\n//   if (!palette) {\r\n//     return <div>Palette not found</div>;\r\n//   }\r\n\r\n//   const handleToggleSound = () => {\r\n//     setSoundOn((prev) => !prev);\r\n//   };\r\n\r\n//   const handleColorClick = (color) => {\r\n//     if (soundOn) {\r\n//       const audio = new Audio(clickSound);\r\n//       audio.play();\r\n//     }\r\n//     navigator.clipboard.writeText(color.color);\r\n//     setFullscreenColor(color.color);\r\n//     setTimeout(() => {\r\n//       setFullscreenColor(null);\r\n//     }, 1000);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"palette-page\">\r\n//       <header className=\"palette-header\">\r\n//         <a href=\"/\" className=\"back-button\">Back</a>\r\n//         <h2 className=\"palette-title\">\r\n//           {palette.paletteName} {palette.emoji}\r\n//         </h2>\r\n//         <button onClick={handleToggleSound} className=\"sound-toggle-button\">\r\n//           {soundOn ? 'Sound On' : 'Sound Off'}\r\n//         </button>\r\n//       </header>\r\n//       <div className=\"color-grid\">\r\n//         {palette.colors.map((color, index) => (\r\n//           <div\r\n//             key={index}\r\n//             className=\"color\"\r\n//             style={{ backgroundColor: color.color }}\r\n//             onClick={() => handleColorClick(color)}\r\n//           >\r\n//             {color.name}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       {fullscreenColor && (\r\n//         <div className=\"fullscreen\" style={{ backgroundColor: fullscreenColor }}>\r\n//           <div className=\"fullscreen-content\">\r\n//             <span className=\"color-code\">{fullscreenColor}</span>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PalettePage;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport palettes from '../data/palette.json';\r\nimport './PalettePage.css';\r\nimport clickSound from '../assets/src_notify.mp3'; // Ensure your file name and path are correct\r\n\r\nconst PalettePage = () => {\r\n  const { id } = useParams();\r\n  const palette = palettes.find((p) => p.id === id);\r\n  const [fullscreenColor, setFullscreenColor] = useState(null);\r\n  const [soundOn, setSoundOn] = useState(true);\r\n\r\n  if (!palette) {\r\n    return <div>Palette not found</div>;\r\n  }\r\n\r\n  const handleToggleSound = () => {\r\n    setSoundOn((prev) => !prev);\r\n  };\r\n\r\n  const handleColorClick = (color) => {\r\n    if (soundOn) {\r\n      const audio = new Audio(clickSound);\r\n      audio.play();\r\n    }\r\n    navigator.clipboard.writeText(color.color);\r\n    setFullscreenColor(color.color);\r\n    setTimeout(() => {\r\n      setFullscreenColor(null);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"palette-page\">\r\n      <header className=\"palette-header\">\r\n        <a href=\"/\" className=\"back-button\">Back</a>\r\n        <h2 className=\"palette-title\">\r\n          {palette.paletteName} {palette.emoji}\r\n        </h2>\r\n        <button onClick={handleToggleSound} className=\"sound-toggle-button\">\r\n          {soundOn ? 'Sound On' : 'Sound Off'}\r\n        </button>\r\n      </header>\r\n      <div className=\"color-grid\">\r\n        {palette.colors.map((color, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"color\"\r\n            style={{ backgroundColor: color.color }}\r\n            onClick={() => handleColorClick(color)}\r\n          >\r\n            {color.name}\r\n            <div className=\"copy-label\">COPY</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {fullscreenColor && (\r\n        <div className=\"fullscreen\" style={{ backgroundColor: fullscreenColor }}>\r\n          <div className=\"fullscreen-content\">\r\n            <span className=\"color-code\">{fullscreenColor}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PalettePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}